#
# Copyright (C) 2005-2024 Centre National d'Etudes Spatiales (CNES)
#
# This file is part of Orfeo Toolbox
#
#     https://www.orfeo-toolbox.org/
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#-----------------------------------------------------------------------------
#
# OTBConfig.cmake - OTB CMake configuration file for external projects.
#
# This file is configured by OTB and used by the UseOTB.cmake module
# to load OTB's settings for an external project.
# It is also read by cmake when the "find_package(OTB <options>)" is used
# This file is largely inspired from the BoostConfig file to handle the
# COMPONENTS options use in "find_package"
#
#-----------------------------------------------------------------------------


# macro used to find the components cmake Config file (which resolve component
# dependencies then define cmake targets).
# these files can be installed in the same folder as this file or can also
# be installed in the lib/cmake/OTB-@OTB_VERSION_MAJOR@.@OTB_VERSION_MINOR@
# folder of the components.
# The PATH_SUFFIXES option of find_package helps to find the correct config file
# accross all folder provided in CMAKE_PREFIX_PATH variable
macro(otb_find_component comp required)
  get_filename_component(_OTB_CMAKEDIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
  string(TOUPPER "${comp}" _UPPER_COMP_NAME)

  set(COMP_REQUIRED "")
  if (${required})
    set(COMP_REQUIRED "REQUIRED")
  endif()

  # When using find_package, cmake will look for directories using the name of
  # the package provided (the first arg).
  #Â But here the directory named ${comp} does not exists.
  # The PATH_SUFFIXES option helps to ignore this behavior and tell
  # explicitly where to look for ${comp}Config.cmake .
  # More info on https://cmake.org/cmake/help/v3.29/command/find_package.html#config-mode-search-procedure
  find_package(${comp} CONFIG ${COMP_REQUIRED} PATH_SUFFIXES "lib/cmake/OTB-@OTB_VERSION_MAJOR@.@OTB_VERSION_MINOR@")

  if (NOT ${${_UPPER_COMP_NAME}_FOUND})
    if (NOT ${required})
      message(WARNING "[OTBConfig] optionnal dependency ${comp} can not be found. Does your CMAKE_PREFIX_PATH is correctly set?")
    endif()
  else()
    message(STATUS "[OTBConfig] Found component ${comp}")
  endif()
  unset(_UPPER_COMP_NAME)
endmacro()



# Get the list of all components availables IN THE SAME DIRECTORY as this file
macro(otb_find_all_components)
  file(GLOB __otb_all_components LIST_DIRECTORIES false
                                 RELATIVE "${CMAKE_CURRENT_LIST_DIR}"
                                 "${CMAKE_CURRENT_LIST_DIR}/*Config.cmake")
  # Keep only component name, use regex and keep the first group in "()"
  string(REGEX REPLACE "([-_A-Za-z0-9]+)Config.cmake" "\\1" __otb_all_components
  "${__otb_all_components}")

  list(REMOVE_ITEM __otb_all_components "OTB")

  message(STATUS "[OTBConfig] ${CMAKE_CURRENT_LIST_DIR} contains the config files for the following OTB components: ${__otb_all_components}")

  foreach(__otb_comp IN LISTS __otb_all_components)
    otb_find_component("${__otb_comp}" FALSE)
    string(TOUPPER "${__otb_comp}" _UPPER_COMP_NAME)
    if (${_UPPER_COMP_NAME}_FOUND)
      list(APPEND OTB_VALID_COMPONENTS "${__otb_comp}")
    endif()
  endforeach()

  message(STATUS "[OTBConfig] Correctly found following OTB components: ${OTB_VALID_COMPONENTS}")
  unset(__otb_all_components)
endmacro()




@OTB_CONFIG_CODE@

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
#RK: TODO: add sse2, see4, see4.1, openmp flags

# The C and C++ flags added by OTB to the cmake-configured flags.
set(OTB_REQUIRED_C_FLAGS "@OTB_REQUIRED_C_FLAGS@")
set(OTB_REQUIRED_CXX_FLAGS "@OTB_REQUIRED_CXX_FLAGS@")
set(OTB_REQUIRED_LINK_FLAGS "@OTB_REQUIRED_LINK_FLAGS@")

# The OTB version number
set(OTB_VERSION_MAJOR "@OTB_VERSION_MAJOR@")
set(OTB_VERSION_MINOR "@OTB_VERSION_MINOR@")
set(OTB_VERSION_PATCH "@OTB_VERSION_PATCH@")

# OTB's CMake directory with modules OTB uses.
set(OTB_CMAKE_DIR "@OTB_CONFIG_CMAKE_DIR@")

# OTB uses OPENMP
set(OTB_USE_OPENMP "@OTB_USE_OPENMP@")

# OTB uses SSE optim
set(OTB_USE_SSE_FLAGS "@OTB_USE_SSE_FLAGS@")

# use Find*.cmake files included in OTB package for external dependencies. (OpenCV, GDAL etc..)
set(CMAKE_MODULE_PATH ${OTB_CMAKE_DIR} ${CMAKE_MODULE_PATH})

# The location of the UseOTB.cmake file.
set(OTB_USE_FILE "@OTB_USE_FILE@")

# Whether OTB was built with shared libraries.
set(OTB_BUILD_SHARED "@BUILD_SHARED_LIBS@")

# Default value for WINDOWS_EXPORT_ALL_SYMBOLS target property
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS "@OTB_CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS@")

# List of available OTB modules.
set(OTB_MODULES_ENABLED "@OTB_CONFIG_MODULES_ENABLED@")

set(OTB_APPLICATION_PATH "@OTB_CONFIG_APPLICATION_PATH@")

# Load module interface macros.
include("@OTB_CONFIG_MODULE_API_FILE@")

# Load application macros.
include(CMakeParseArguments)
include("@OTB_CONFIG_APPLI_MACROS_FILE@")

# if we don't specify an component, use the ALL option
if(NOT OTB_FIND_COMPONENTS)
  message(STATUS "[OTBConfig] No otb components specified, we will include ALL installed otb components")
  list(APPEND OTB_FIND_COMPONENTS "ALL")
endif()

# Compute set of requested modules. We can request ALL modules or specific modules
if("ALL" IN_LIST OTB_FIND_COMPONENTS)

  list(LENGTH OTB_FIND_COMPONENTS __nb_components)
  if(NOT ${__nb_components} EQUAL 1)
    message(AUTHOR_WARNING "[OTBConfig] ALL cannot be combined with named components; the named components will be ignored.")
  endif()

  unset(__nb_components)
  set(OTB_VALID_COMPONENTS "")
  otb_find_all_components()

  foreach(__otb_comp IN LISTS OTB_VALID_COMPONENTS)
    list(APPEND OTB_MODULES_REQUESTED "${OTB_${__otb_comp}_MODULES_ENABLED}")
  endforeach()
else()
  # variables OTB_FIND_COMPONENTS and OTB_FIND_REQUIRED_${__otb_comp} are
  # automatically generated by the "find_package(OTB ...)" command
  foreach(__otb_comp IN LISTS OTB_FIND_COMPONENTS)
    otb_find_component(${__otb_comp} ${OTB_FIND_REQUIRED_${__otb_comp}})
    # add list of the modules of the required component
    list(APPEND OTB_MODULES_REQUESTED "${OTB_${__otb_comp}_MODULES_ENABLED}")
  endforeach()
endif()

# Load requested modules and their dependencies into variables:
#  OTB_LIBRARIES       = Libraries to link
#  OTB_INCLUDE_DIRS    = Header file search path
#  OTB_LIBRARY_DIRS    = Library search path (for outside dependencies)
otb_module_config(OTB ${OTB_MODULES_REQUESTED})
