# WARNING!
# OTB uses Git-LFS to store the (large) tests data.
# Git-LFS is mostly transparent for the user and recent versions
# are able to use Git-LFS quite efficiently.
# But Git fails to manage efficiently numerous LFS data.
# We have to use directly git-lfs wrapping commands to have an
# efficient cloning step.
# Furthermore, Git-LFS and Gitlab sufer a bug preventing usage of
# GIT_STRATEGY=fetch (https://gitlab.com/gitlab-org/gitlab-runner/issues/3318)

variables:
  BUILD_IMAGE_REGISTRY: $CI_REGISTRY/orfeotoolbox/otb-build-env
  GIT_CLONE_PATH: $CI_BUILDS_DIR/otb
  DOCKER_DRIVER: overlay2
  GIT_DEPTH: "3"
  # Disable automatic checkout to let us fetch LFS before
  GIT_CHECKOUT: "false"
  # The fetch strategy fails with LFS and GitLab
  GIT_STRATEGY: "clone"

stages:
  - precheck
  - prepare
  - build
  - report

.general:
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

.common:
  extends: .general
  before_script:
    - git lfs install --skip-repo
    # Provision efficiently the local LFS cache before checkout
    - git lfs fetch origin $CI_COMMIT_SHA
    # Checkout the expected branch
    - git checkout -f -q $CI_COMMIT_SHA
  after_script:
    - python3 CI/cdash_handler.py
  artifacts:
    when: on_failure
    expire_in: 24 hrs
    paths:
      - build/*/*.log #CMake log
      - log/*.txt # Others

# fast-build:
#   extends: .common
#   only: [merge_requests, branches]
#   stage: precheck
#   image: $BUILD_IMAGE_REGISTRY/otb-ubuntu-native-develop:latest
#   before_script:
#     - git checkout -f -q $CI_COMMIT_SHA
#     - python3 CI/check_twin_pipelines.py
#   script:
#     - ctest -V -S CI/main_ci.cmake -DIMAGE_NAME:string=ubuntu-18.04-fast
#     - ccache -s

# .common-build:
#   extends: .common
#   only:
#     - merge_requests
#     - develop
#     - /^release-[0-9]+\.[0-9]+$/
#   stage: build

# debian-build:
#   extends: .common-build
#   image: $BUILD_IMAGE_REGISTRY/otb-debian-native:unstable
#   script:
#     - xvfb-run -a -n 1 -s "-screen 0 1024x768x24 -dpi 96" ctest -V -S CI/main_ci.cmake -DIMAGE_NAME:string=debian-unstable-gcc

.common-prepare:
  extends: .general
  only:
    - merge_requests
    - develop
    - /^release-[0-9]+\.[0-9]+$/
  stage: prepare
  before_script:
    - git checkout -f -q $CI_COMMIT_SHA
    - git lfs install --skip-repo
    - git config --global user.email "otbbot@orfeo-toolbox.org"
    - git config --global user.name "otbbot"
  artifacts:
    expire_in: 24 hrs
    when: always
    paths:
      - sb_branch.txt # Needed to checkout correct branch in build step
      - build/*/*/*/*.log # Superbuild log

## Ubuntu superbuild
ubuntu-superbuild-prepare:
  extends: .common-prepare
  only: [new-ci]
  image: $BUILD_IMAGE_REGISTRY/otb-ubuntu-superbuild-base:18.04
  script:
    - ctest -VV -S CI/prepare_superbuild.cmake -DIMAGE_NAME:string=otb-ubuntu-superbuild-base

# ubuntu-superbuild-build:
#   extends: .common-build
#   image: $BUILD_IMAGE_REGISTRY/otb-ubuntu-superbuild-base:18.04
#   script:
#     - xvfb-run -a -n 1 -s "-screen 0 1024x768x24 -dpi 96" ctest -V -S CI/main_superbuild.cmake -DIMAGE_NAME:string=ubuntu-18.04-llvm-xdk
#     - xvfb-run -a -n 1 -s "-screen 0 1024x768x24 -dpi 96" ctest -VV -S CI/main_packages.cmake -DIMAGE_NAME:string=otb-ubuntu-superbuild-base
#   dependencies:
#     - ubuntu-superbuild-prepare
#   artifacts:
#     paths:
#       - build/CookBook-*-html.tar.gz
#       - build/Documentation/Cookbook/latex/CookBook-*.pdf
#       - build/Documentation/Doxygen/OTB-Doxygen-*.tar.bz2

# ## CentOS superbuild
# centos-superbuild-prepare:
#   extends: .common-prepare
#   image: $BUILD_IMAGE_REGISTRY/otb-centos-superbuild-base:6.6
#   script:
#     - ctest -VV -S CI/prepare_superbuild.cmake -DIMAGE_NAME:string=otb-centos-superbuild-base

# centos-superbuild-build:
#   extends: .common-build
#   image: $BUILD_IMAGE_REGISTRY/otb-centos-superbuild-base:6.6
#   script:
#     - xvfb-run -a -n 1 -s "-screen 0 1024x768x24 -dpi 96" ctest -V -S CI/main_superbuild.cmake -DIMAGE_NAME:string=otb-centos-superbuild-base
#     - xvfb-run -a -n 1 -s "-screen 0 1024x768x24 -dpi 96" ctest -VV -S CI/main_packages.cmake -DIMAGE_NAME:string=otb-centos-superbuild-base
#   dependencies:
#     - centos-superbuild-prepare

# ## MacOS superbuild
# macos-superbuild-prepare:
#   tags:
#     - macos
#   extends: .common-prepare
#   before_script:
#     # No need to install lfs as this machine is persistent
#     # No need to do git config
#     # Checkout the expected branch
#     - export GIT_LFS_SKIP_SMUDGE=1
#     - git checkout -f -q $CI_COMMIT_SHA
#     - export GIT_LFS_SKIP_SMUDGE=0
#   script:
#     - ctest -VV -S CI/prepare_superbuild.cmake -DIMAGE_NAME:string=otb-macos-superbuild

# macos-superbuild-build:
#   tags:
#     - macos
#   extends: .common-build
#   script:
#     - ctest -V -S CI/main_superbuild.cmake -DIMAGE_NAME:string=otb-macos-superbuild
#     - ctest -VV -S CI/main_packages.cmake -DIMAGE_NAME:string=otb-macos-superbuild
#   dependencies:
#     - macos-superbuild-prepare


ubuntu-superbuild-qa-code-coverage:
  extends: .common
  image: $BUILD_IMAGE_REGISTRY/otb-ubuntu-superbuild-qa:18.04
  stage: build
  only:
    - develop
    - new-ci
  script:
    - xvfb-run -a -n 1 -s "-screen 0 1024x768x24 -dpi 96"
               ctest -V -S CI/main_qa.cmake
                     -DIMAGE_NAME:string=ubuntu-18.04-llvm-xdk
                     -DQA:BOOL=ON
    - saxon-xslt -o build/ctest_report.xml
                 build/Testing/`head -n 1 build/Testing/TAG`/Test.xml
                 CI/ctest2junit.xsl
  after_script: []
  dependencies:
    - ubuntu-superbuild-prepare
  artifacts:
    expire_in: 24 hrs
    when: always
    paths:
      - build/compile_commands.json
      - build/ctest_report.xml


ubuntu-superbuild-qa-static-analysis:
  extends: .common
  image: $BUILD_IMAGE_REGISTRY/otb-ubuntu-superbuild-qa:18.04
  stage: build
  only:
    - develop
    - new-ci
  script:
    - find Modules -type f \( -name '*.h' -o -name '*.hxx' \) -exec dirname '{}' \; |
          grep -vE '^Modules/ThirdParty/' |
          sort -u > header_directories
    - cppcheck -q --xml --xml-version=2 --enable=all
               --language=c++ --std=c++14 --platform=unix64
               --includes-file=header_directories
               -i Modules/ThirdParty Modules
               2> build/cppcheck_report.xml
  after_script: []
  dependencies:
    - ubuntu-superbuild-prepare
  artifacts:
    expire_in: 24 hrs
    when: always
    paths:
      - build/cppcheck_report.xml


ubuntu-superbuild-report:
  extends: .common
  variables:
    GIT_DEPTH: ""
  image: $BUILD_IMAGE_REGISTRY/otb-ubuntu-superbuild-qa:18.04
  stage: report
  only:
    - develop
    - new-ci
  script:
    - sonar-scanner -Dproject.settings=sonar-project.properties
                    -Dsonar.host.url=https://sonar.orfeo-toolbox.org
                    -Dsonar.login=$SONAR_OTB_TOKEN
  after_script: []
  dependencies:
    - ubuntu-superbuild-qa-code-coverage
    - ubuntu-superbuild-qa-static-analysis
